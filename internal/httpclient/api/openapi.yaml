openapi: 3.0.3
info:
  contact:
    email: hi@ory.sh
  description: |
    Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs
    are exposed on different ports. Public APIs can face the public internet without any protection
    while administrative APIs should never be exposed without prior authorization. To protect
    the administative API port you should use something like Nginx, Ory Oathkeeper, or any other
    technology capable of authorizing incoming requests.
  license:
    name: Apache 2.0
  title: Ory Kratos API
servers:
- url: https://{tenant}.tenants.oryapis.com/api/kratos/{api}
  variables:
    api:
      default: public
      description: Target the public or administrative API.
      enum:
      - public
      - admin
    tenant:
      default: demo
      description: Tenant ID as provided by Ory Cloud.
tags:
- description: All administrative API endpoints exposed at the admin API port.
  externalDocs:
    url: https://www.ory.sh/kratos/docs/reference/api
  name: admin
- description: All public API endpoints exposed at the public API port.
  externalDocs:
    url: https://www.ory.sh/kratos/docs/reference/api
  name: public
paths:
  /health/alive:
    get:
      description: |-
        This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming
        HTTP requests. This status does currently not include checks whether the database connection is working.

        If the service supports TLS Edge Termination, this endpoint does not require the
        `X-Forwarded-Proto` header to be set.

        Be aware that if you are running multiple nodes of this service, the health status will never
        refer to the cluster state, only to a single instance.
      operationId: isAlive
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Ory Kratos is ready to accept connections.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Check HTTP Server Status
      tags:
      - admin
  /health/ready:
    get:
      description: |-
        This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g.
        the database) are responsive as well.

        If the service supports TLS Edge Termination, this endpoint does not require the
        `X-Forwarded-Proto` header to be set.

        Be aware that if you are running multiple nodes of Ory Kratos, the health status will never
        refer to the cluster state, only to a single instance.
      operationId: isReady
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Ory Kratos is ready to accept requests.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_503'
          description: Ory Kratos is not yet ready to accept requests.
      summary: Check HTTP Server and Database Status
      tags:
      - admin
  /identities:
    get:
      description: |-
        Lists all identities. Does not support search at the moment.

        Learn how identities work in [ORY Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
      operationId: listIdentities
      parameters:
      - description: |-
          Items per Page

          This is the number of items per page.
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 100
          format: int64
          maximum: 500
          minimum: 1
          type: integer
        style: form
      - description: Pagination Page
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          format: int64
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Identity'
                type: array
          description: A list of identities.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: List Identities
      tags:
      - admin
    post:
      description: |-
        This endpoint creates an identity. It is NOT possible to set an identity's credentials (password, ...)
        using this method! A way to achieve that will be introduced in the future.

        Learn how identities work in [ORY Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
      operationId: createIdentity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentity'
        x-originalParamName: Body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identity'
          description: A single identity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Create an Identity
      tags:
      - admin
  /identities/{id}:
    delete:
      description: |-
        Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone.
        This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is
        assumed that is has been deleted already.

        Learn how identities work in [ORY Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
      operationId: deleteIdentity
      parameters:
      - description: ID is the identity's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Delete an Identity
      tags:
      - admin
    get:
      description: Learn how identities work in [ORY Kratos' User And Identity Model
        Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
      operationId: getIdentity
      parameters:
      - description: ID must be set to the ID of identity you want to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identity'
          description: A single identity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Get an Identity
      tags:
      - admin
    put:
      description: |-
        This endpoint updates an identity. It is NOT possible to set an identity's credentials (password, ...)
        using this method! A way to achieve that will be introduced in the future.

        The full identity payload (except credentials) is expected. This endpoint does not support patching.

        Learn how identities work in [ORY Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).
      operationId: updateIdentity
      parameters:
      - description: ID must be set to the ID of identity you want to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIdentity'
        x-originalParamName: Body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identity'
          description: A single identity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Update an Identity
      tags:
      - admin
  /metrics/prometheus:
    get:
      description: |-
        ```
        metadata:
        annotations:
        prometheus.io/port: "4434"
        prometheus.io/path: "/metrics/prometheus"
        ```
      operationId: prometheus
      responses:
        "200":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
      summary: |-
        Get snapshot metrics from the Hydra service. If you're using k8s, you can then add annotations to
        your deployment like so:
      tags:
      - admin
  /recovery/link:
    post:
      description: |-
        This endpoint creates a recovery link which should be given to the user in order for them to recover
        (or activate) their account.
      operationId: createRecoveryLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecoveryLink'
        x-originalParamName: Body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recoveryLink'
          description: recoveryLink
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Create a Recovery Link
      tags:
      - admin
  /schemas/{id}:
    get:
      description: Get a Traits Schema Definition
      operationId: getSchema
      parameters:
      - description: ID must be set to the ID of schema you want to get
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonSchema'
          description: jsonSchema
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      tags:
      - public
      - admin
  /self-service/browser/flows/logout:
    get:
      description: |-
        This endpoint initializes a logout flow.

        > This endpoint is NOT INTENDED for API clients and only works
        with browsers (Chrome, Firefox, ...).

        On successful logout, the browser will be redirected (HTTP 302 Found) to the `return_to` parameter of the initial request
        or fall back to `urls.default_return_to`.

        More information can be found at [ORY Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
      operationId: initializeSelfServiceBrowserLogoutFlow
      responses:
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Initialize Browser-Based Logout User Flow
      tags:
      - public
  /self-service/browser/flows/registration/strategies/oidc/settings/connections:
    post:
      description: |-
        This endpoint completes a browser-based settings flow. This is usually achieved by POSTing data to this
        endpoint.

        > This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...) and HTML Forms.

        More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
      operationId: completeSelfServiceBrowserSettingsOIDCSettingsFlow
      responses:
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Complete the Browser-Based Settings Flow for the OpenID Connect Strategy
      tags:
      - public
  /self-service/errors:
    get:
      description: |-
        This endpoint returns the error associated with a user-facing self service errors.

        This endpoint supports stub values to help you implement the error UI:

        `?error=stub:500` - returns a stub 500 (Internal Server Error) error.

        More information can be found at [ORY Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
      operationId: getSelfServiceError
      parameters:
      - description: Error is the container's ID
        explode: true
        in: query
        name: error
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorContainer'
          description: User-facing error response
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Get User-Facing Self-Service Errors
      tags:
      - public
      - admin
  /self-service/login/api:
    get:
      description: |-
        This endpoint initiates a login flow for API clients such as mobile devices, smart TVs, and so on.

        If a valid provided session cookie or session token is provided, a 400 Bad Request error
        will be returned unless the URL query parameter `?refresh=true` is set.

        To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.

        :::warning

        You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server
        Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make
        you vulnerable to a variety of CSRF attacks, including CSRF login attacks.

        This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).

        :::

        More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
      operationId: initializeSelfServiceLoginViaAPIFlow
      parameters:
      - description: |-
          Refresh a login session

          If set to true, this will refresh an existing login session by
          asking the user to sign in again. This will reset the
          authenticated_at time of the session.
        explode: true
        in: query
        name: refresh
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginFlow'
          description: loginFlow
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Initialize Login Flow for API clients
      tags:
      - public
  /self-service/login/browser:
    get:
      description: |-
        This endpoint initializes a browser-based user login flow. Once initialized, the browser will be redirected to
        `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session
        exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter
        `?refresh=true` was set.

        This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).

        More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
      operationId: initializeSelfServiceLoginViaBrowserFlow
      responses:
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Initialize Login Flow for browsers
      tags:
      - public
  /self-service/login/flows:
    get:
      description: |-
        This endpoint returns a login flow's context with, for example, error details and other information.

        More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
      operationId: getSelfServiceLoginFlow
      parameters:
      - description: |-
          The Login Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/login?flow=abcde`).
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginFlow'
          description: loginFlow
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Get Login Flow
      tags:
      - public
      - admin
  /self-service/login/methods/password:
    post:
      description: |-
        Use this endpoint to complete a login flow by sending an identity's identifier and password. This endpoint
        behaves differently for API and browser flows.

        API flows expect `application/json` to be sent in the body and responds with
        HTTP 200 and a application/json body with the session token on success;
        HTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set;
        HTTP 400 on form validation errors.

        Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with
        a HTTP 302 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded;
        a HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.

        More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
      operationId: completeSelfServiceLoginFlowWithPasswordMethod
      parameters:
      - description: The Flow ID
        explode: true
        in: query
        name: flow
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteSelfServiceLoginFlowWithPasswordMethod'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CompleteSelfServiceLoginFlowWithPasswordMethod'
        x-originalParamName: Body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginViaApiResponse'
          description: loginViaApiResponse
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginFlow'
          description: loginFlow
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Complete Login Flow with Username/Email Password Method
      tags:
      - public
  /self-service/recovery/api:
    get:
      description: |-
        This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.

        If a valid provided session cookie or session token is provided, a 400 Bad Request error.

        To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.

        :::warning

        You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server
        Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make
        you vulnerable to a variety of CSRF attacks.

        This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).

        :::

        More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
      operationId: initializeSelfServiceRecoveryViaAPIFlow
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recoveryFlow'
          description: recoveryFlow
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Initialize Recovery Flow for API Clients
      tags:
      - public
  /self-service/recovery/browser:
    get:
      description: |-
        This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to
        `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session
        exists, the browser is returned to the configured return URL.

        This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).

        More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
      operationId: initializeSelfServiceRecoveryViaBrowserFlow
      responses:
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Initialize Recovery Flow for Browser Clients
      tags:
      - public
  /self-service/recovery/flows:
    get:
      description: |-
        This endpoint returns a recovery flow's context with, for example, error details and other information.

        More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
      operationId: getSelfServiceRecoveryFlow
      parameters:
      - description: |-
          The Flow ID

          The value for this parameter comes from `request` URL Query parameter sent to your
          application (e.g. `/recovery?flow=abcde`).
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recoveryFlow'
          description: recoveryFlow
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Get information about a recovery flow
      tags:
      - public
      - admin
  /self-service/recovery/methods/link:
    post:
      description: |-
        Use this endpoint to complete a recovery flow using the link method. This endpoint
        behaves differently for API and browser flows and has several states:

        `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent
        and works with API- and Browser-initiated flows.
        For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid
        and a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired).
        For Browser clients it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended.
        `sent_email` is the success state after `choose_method` and allows the user to request another recovery email. It
        works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state.
        `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow ("sending a recovery link")
        does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL
        (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with
        a new Recovery Flow ID which contains an error message that the recovery link was invalid.

        More information can be found at [ORY Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).
      operationId: completeSelfServiceRecoveryFlowWithLinkMethod
      parameters:
      - description: |-
          Recovery Token

          The recovery token which completes the recovery request. If the token
          is invalid (e.g. expired) an error will be shown to the end-user.
        explode: true
        in: query
        name: token
        required: false
        schema:
          type: string
        style: form
      - description: |-
          The Flow ID

          format: uuid
        explode: true
        in: query
        name: flow
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/completeSelfServiceRecoveryFlowWithLinkMethod'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/completeSelfServiceRecoveryFlowWithLinkMethod'
        x-originalParamName: Body
      responses:
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recoveryFlow'
          description: recoveryFlow
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Complete Recovery Flow with Link Method
      tags:
      - public
  /self-service/registration/api:
    get:
      description: |-
        This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.

        If a valid provided session cookie or session token is provided, a 400 Bad Request error
        will be returned unless the URL query parameter `?refresh=true` is set.

        To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.

        :::warning

        You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server
        Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make
        you vulnerable to a variety of CSRF attacks.

        This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).

        :::

        More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
      operationId: initializeSelfServiceRegistrationViaAPIFlow
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registrationFlow'
          description: registrationFlow
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Initialize Registration Flow for API clients
      tags:
      - public
  /self-service/registration/browser:
    get:
      description: |-
        This endpoint initializes a browser-based user registration flow. Once initialized, the browser will be redirected to
        `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session
        exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter
        `?refresh=true` was set.

        :::note

        This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).

        :::

        More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
      operationId: initializeSelfServiceRegistrationViaBrowserFlow
      responses:
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Initialize Registration Flow for browsers
      tags:
      - public
  /self-service/registration/flows:
    get:
      description: |-
        This endpoint returns a registration flow's context with, for example, error details and other information.

        More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
      operationId: getSelfServiceRegistrationFlow
      parameters:
      - description: |-
          The Registration Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/registration?flow=abcde`).
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registrationFlow'
          description: registrationFlow
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Get Registration Flow
      tags:
      - public
      - admin
  /self-service/registration/methods/password:
    post:
      description: |-
        Use this endpoint to complete a registration flow by sending an identity's traits and password. This endpoint
        behaves differently for API and browser flows.

        API flows expect `application/json` to be sent in the body and respond with
        HTTP 200 and a application/json body with the created identity success - if the session hook is configured the
        `session` and `session_token` will also be included;
        HTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set;
        HTTP 400 on form validation errors.

        Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with
        a HTTP 302 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded;
        a HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.

        More information can be found at [ORY Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).
      operationId: completeSelfServiceRegistrationFlowWithPasswordMethod
      parameters:
      - description: Flow is flow ID.
        explode: true
        in: query
        name: flow
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
        x-originalParamName: Payload
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registrationViaApiResponse'
          description: registrationViaApiResponse
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registrationFlow'
          description: registrationFlow
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Complete Registration Flow with Username/Email Password Method
      tags:
      - public
  /self-service/settings/api:
    get:
      description: |-
        This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on.
        You must provide a valid ORY Kratos Session Token for this endpoint to respond with HTTP 200 OK.

        To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.

        :::warning

        You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server
        Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make
        you vulnerable to a variety of CSRF attacks.

        This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).

        :::

        More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
      operationId: initializeSelfServiceSettingsViaAPIFlow
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsFlow'
          description: settingsFlow
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      security:
      - sessionToken: []
      summary: Initialize Settings Flow for API Clients
      tags:
      - public
  /self-service/settings/browser:
    get:
      description: |-
        This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to
        `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid
        ORY Kratos Session Cookie is included in the request, a login flow will be initialized.

        :::note

        This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).

        :::

        More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
      operationId: initializeSelfServiceSettingsViaBrowserFlow
      responses:
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      security:
      - sessionToken: []
      summary: Initialize Settings Flow for Browsers
      tags:
      - public
  /self-service/settings/flows:
    get:
      description: |-
        When accessing this endpoint through ORY Kratos' Public API you must ensure that either the ORY Kratos Session Cookie
        or the ORY Kratos Session Token are set. The public endpoint does not return 404 status codes
        but instead 403 or 500 to improve data privacy.

        You can access this endpoint without credentials when using ORY Kratos' Admin API.

        More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
      operationId: getSelfServiceSettingsFlow
      parameters:
      - description: |-
          ID is the Settings Flow ID

          The value for this parameter comes from `flow` URL Query parameter sent to your
          application (e.g. `/settings?flow=abcde`).
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsFlow'
          description: settingsFlow
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "410":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      security:
      - sessionToken: []
      summary: Get Settings Flow
      tags:
      - public
      - admin
  /self-service/settings/methods/password:
    post:
      description: |-
        Use this endpoint to complete a settings flow by sending an identity's updated password. This endpoint
        behaves differently for API and browser flows.

        API-initiated flows expect `application/json` to be sent in the body and respond with
        HTTP 200 and an application/json body with the session token on success;
        HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set;
        HTTP 400 on form validation errors.
        HTTP 401 when the endpoint is called without a valid session token.
        HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached.
        Implies that the user needs to re-authenticate.

        Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with
        a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded;
        a HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise.
        a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.

        More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
      operationId: completeSelfServiceSettingsFlowWithPasswordMethod
      parameters:
      - description: Flow is flow ID.
        explode: true
        in: query
        name: flow
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteSelfServiceSettingsFlowWithPasswordMethod'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CompleteSelfServiceSettingsFlowWithPasswordMethod'
        x-originalParamName: Body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsViaApiResponse'
          description: settingsViaApiResponse
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsFlow'
          description: settingsFlow
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      security:
      - sessionToken: []
      summary: Complete Settings Flow with Username/Email Password Method
      tags:
      - public
  /self-service/settings/methods/profile:
    post:
      description: |-
        Use this endpoint to complete a settings flow by sending an identity's updated traits. This endpoint
        behaves differently for API and browser flows.

        API-initiated flows expect `application/json` to be sent in the body and respond with
        HTTP 200 and an application/json body with the session token on success;
        HTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set;
        HTTP 400 on form validation errors.
        HTTP 401 when the endpoint is called without a valid session token.
        HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached and a sensitive field was
        updated (e.g. recovery email). Implies that the user needs to re-authenticate.

        Browser flows expect `application/x-www-form-urlencoded` to be sent in the body and responds with
        a HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded;
        a HTTP 302 redirect to the settings UI URL with the flow ID containing the validation errors otherwise.
        a HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.

        More information can be found at [ORY Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
      operationId: completeSelfServiceSettingsFlowWithProfileMethod
      parameters:
      - description: Flow is flow ID.
        explode: true
        in: query
        name: flow
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: object
          application/x-www-form-urlencoded:
            schema:
              type: object
        x-originalParamName: Payload
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsFlow'
          description: settingsFlow
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsFlow'
          description: settingsFlow
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      security:
      - sessionToken: []
      summary: Complete Settings Flow with Profile Method
      tags:
      - public
  /self-service/verification/api:
    get:
      description: |-
        This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.

        To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.

        :::warning

        You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server
        Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make
        you vulnerable to a variety of CSRF attacks.

        This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).

        :::

        More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
      operationId: initializeSelfServiceVerificationViaAPIFlow
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verificationFlow'
          description: verificationFlow
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Initialize Verification Flow for API Clients
      tags:
      - public
  /self-service/verification/browser:
    get:
      description: |-
        This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to
        `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.

        This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).

        More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
      operationId: initializeSelfServiceVerificationViaBrowserFlow
      responses:
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Initialize Verification Flow for Browser Clients
      tags:
      - public
  /self-service/verification/flows:
    get:
      description: |-
        This endpoint returns a verification flow's context with, for example, error details and other information.

        More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
      operationId: getSelfServiceVerificationFlow
      parameters:
      - description: |-
          The Flow ID

          The value for this parameter comes from `request` URL Query parameter sent to your
          application (e.g. `/verification?flow=abcde`).
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verificationFlow'
          description: verificationFlow
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Get Verification Flow
      tags:
      - public
      - admin
  /self-service/verification/methods/link:
    post:
      description: |-
        Use this endpoint to complete a verification flow using the link method. This endpoint
        behaves differently for API and browser flows and has several states:

        `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent
        and works with API- and Browser-initiated flows.
        For API clients it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid
        and a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired).
        For Browser clients it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended.
        `sent_email` is the success state after `choose_method` and allows the user to request another verification email. It
        works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state.
        `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow ("sending a verification link")
        does not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL
        (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with
        a new Verification Flow ID which contains an error message that the verification link was invalid.

        More information can be found at [ORY Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).
      operationId: completeSelfServiceVerificationFlowWithLinkMethod
      parameters:
      - description: |-
          Verification Token

          The verification token which completes the verification request. If the token
          is invalid (e.g. expired) an error will be shown to the end-user.
        explode: true
        in: query
        name: token
        required: false
        schema:
          type: string
        style: form
      - description: |-
          The Flow ID

          format: uuid
        explode: true
        in: query
        name: flow
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/completeSelfServiceVerificationFlowWithLinkMethod'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/completeSelfServiceVerificationFlowWithLinkMethod'
        x-originalParamName: Body
      responses:
        "302":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verificationFlow'
          description: verificationFlow
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Complete Verification Flow with Link Method
      tags:
      - public
  /sessions:
    delete:
      description: |-
        Use this endpoint to revoke a session using its token. This endpoint is particularly useful for API clients
        such as mobile apps to log the user out of the system and invalidate the session.

        This endpoint does not remove any HTTP Cookies - use the Self-Service Logout Flow instead.
      operationId: revokeSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/revokeSession'
        required: true
        x-originalParamName: Body
      responses:
        "204":
          description: |-
            Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
            typically 201.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Revoke and Invalidate a Session
      tags:
      - public
  /sessions/whoami:
    get:
      description: |-
        Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated.
        Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent.
        Additionally when the request it successful it adds the user ID to the 'X-Kratos-Authenticated-Identity-Id' header in the response.

        This endpoint is useful for reverse proxies and API Gateways.
      operationId: whoami
      parameters:
      - explode: false
        in: header
        name: Cookie
        required: false
        schema:
          type: string
        style: simple
      - description: 'in: authorization'
        explode: true
        in: query
        name: Authorization
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
          description: session
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      security:
      - sessionToken: []
      summary: Check Who the Current HTTP Session Belongs To
      tags:
      - public
  /version:
    get:
      description: |-
        This endpoint returns the version of Ory Kratos.

        If the service supports TLS Edge Termination, this endpoint does not require the
        `X-Forwarded-Proto` header to be set.

        Be aware that if you are running multiple nodes of this service, the version will never
        refer to the cluster state, only to a single instance.
      operationId: getVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: Returns the Ory Kratos version.
      summary: Return Running Software Version.
      tags:
      - admin
components:
  responses:
    emptyResponse:
      description: |-
        Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
        typically 201.
    errorContainer:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorContainer'
      description: User-facing error response
    identityList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Identity'
            type: array
      description: A list of identities.
    identityResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Identity'
      description: A single identity.
  schemas:
    CompleteSelfServiceBrowserSettingsProfileStrategyFlow:
      description: nolint:deadcode,unused
      properties:
        csrf_token:
          description: |-
            The Anti-CSRF Token

            This token is only required when performing browser flows.
          type: string
        traits:
          description: Traits contains all of the identity's traits.
          type: object
      type: object
    CompleteSelfServiceLoginFlowWithPasswordMethod:
      example:
        identifier: identifier
        password: password
        csrf_token: csrf_token
      properties:
        csrf_token:
          description: Sending the anti-csrf token is only required for browser login
            flows.
          type: string
        identifier:
          description: Identifier is the email or username of the user trying to log
            in.
          type: string
        password:
          description: The user's password.
          type: string
      type: object
    CompleteSelfServiceSettingsFlowWithPasswordMethod:
      example:
        password: password
        csrf_token: csrf_token
      properties:
        csrf_token:
          description: |-
            CSRFToken is the anti-CSRF token

            type: string
          type: string
        password:
          description: |-
            Password is the updated password

            type: string
          type: string
      required:
      - password
      type: object
    CreateIdentity:
      example:
        traits: '{}'
        schema_id: schema_id
      properties:
        schema_id:
          description: SchemaID is the ID of the JSON Schema to be used for validating
            the identity's traits.
          type: string
        traits:
          description: |-
            Traits represent an identity's traits. The identity is able to create, modify, and delete traits
            in a self-service manner. The input will always be validated against the JSON Schema defined
            in `schema_url`.
          type: object
      required:
      - schema_id
      - traits
      type: object
    CreateRecoveryLink:
      example:
        identity_id: identity_id
        expires_in: expires_in
      properties:
        expires_in:
          description: |-
            Link Expires In

            The recovery link will expire at that point in time. Defaults to the configuration value of
            `selfservice.flows.recovery.request_lifespan`.
          pattern: ^[0-9]+(ns|us|ms|s|m|h)$
          type: string
        identity_id:
          format: uuid4
          type: string
      required:
      - identity_id
      type: object
    CredentialsType:
      description: and so on.
      title: CredentialsType  represents several different credential types, like
        password credentials, passwordless credentials,
      type: string
    ID:
      format: int64
      type: integer
    Identity:
      example:
        recovery_addresses:
        - id: id
          value: value
          via: via
        - id: id
          value: value
          via: via
        traits: '{}'
        verifiable_addresses:
        - verified_at: 2000-01-23T04:56:07.000+00:00
          verified: true
          id: id
          value: value
          status: status
          via: via
        - verified_at: 2000-01-23T04:56:07.000+00:00
          verified: true
          id: id
          value: value
          status: status
          via: via
        schema_id: schema_id
        schema_url: schema_url
        id: id
      properties:
        id:
          format: uuid4
          type: string
        recovery_addresses:
          description: RecoveryAddresses contains all the addresses that can be used
            to recover an identity.
          items:
            $ref: '#/components/schemas/RecoveryAddress'
          type: array
          x-omitempty: true
        schema_id:
          description: SchemaID is the ID of the JSON Schema to be used for validating
            the identity's traits.
          type: string
        schema_url:
          description: |-
            SchemaURL is the URL of the endpoint where the identity's traits schema can be fetched from.

            format: url
          type: string
        traits:
          type: object
        verifiable_addresses:
          description: VerifiableAddresses contains all the addresses that can be
            verified by the user.
          items:
            $ref: '#/components/schemas/VerifiableAddress'
          type: array
          x-omitempty: true
      required:
      - id
      - schema_id
      - schema_url
      - traits
      type: object
    NullTime:
      format: date-time
      title: NullTime implements sql.NullTime functionality.
      type: string
    RecoveryAddress:
      example:
        id: id
        value: value
        via: via
      properties:
        id:
          format: uuid4
          type: string
        value:
          type: string
        via:
          type: string
      required:
      - id
      - value
      - via
      type: object
    RecoveryAddressType:
      type: string
    State:
      type: string
    Traits:
      type: object
    Type:
      description: The flow type can either be `api` or `browser`.
      title: Type is the flow type.
      type: string
    UUID:
      format: uuid4
      type: string
    UpdateIdentity:
      example:
        traits: '{}'
        schema_id: schema_id
      properties:
        schema_id:
          description: |-
            SchemaID is the ID of the JSON Schema to be used for validating the identity's traits. If set
            will update the Identity's SchemaID.
          type: string
        traits:
          description: |-
            Traits represent an identity's traits. The identity is able to create, modify, and delete traits
            in a self-service manner. The input will always be validated against the JSON Schema defined
            in `schema_id`.
          type: object
      required:
      - traits
      type: object
    VerifiableAddress:
      example:
        verified_at: 2000-01-23T04:56:07.000+00:00
        verified: true
        id: id
        value: value
        status: status
        via: via
      properties:
        id:
          format: uuid4
          type: string
        status:
          type: string
        value:
          type: string
        verified:
          type: boolean
        verified_at:
          format: date-time
          title: NullTime implements sql.NullTime functionality.
          type: string
        via:
          type: string
      required:
      - id
      - status
      - value
      - verified
      - via
      type: object
    VerifiableAddressStatus:
      type: string
    VerifiableAddressType:
      type: string
    completeSelfServiceBrowserSettingsOIDCFlowPayload:
      properties:
        flow:
          description: |-
            Flow ID is the flow's ID.

            in: query
          type: string
        link:
          description: |-
            Link this provider

            Either this or `unlink` must be set.

            type: string
            in: body
          type: string
        unlink:
          description: |-
            Unlink this provider

            Either this or `link` must be set.

            type: string
            in: body
          type: string
      type: object
    completeSelfServiceRecoveryFlowWithLinkMethod:
      properties:
        csrf_token:
          description: Sending the anti-csrf token is only required for browser login
            flows.
          type: string
        email:
          description: |-
            Email to Recover

            Needs to be set when initiating the flow. If the email is a registered
            recovery email, a recovery link will be sent. If the email is not known,
            a email with details on what happened will be sent instead.

            format: email
            in: body
          type: string
      type: object
    completeSelfServiceVerificationFlowWithLinkMethod:
      properties:
        csrf_token:
          description: Sending the anti-csrf token is only required for browser login
            flows.
          type: string
        email:
          description: |-
            Email to Verify

            Needs to be set when initiating the flow. If the email is a registered
            verification email, a verification link will be sent. If the email is not known,
            a email with details on what happened will be sent instead.

            format: email
            in: body
          type: string
      type: object
    errorContainer:
      example:
        id: id
        errors:
        - '{}'
        - '{}'
      properties:
        errors:
          description: Errors in the container
          items:
            type: object
          type: array
        id:
          format: uuid4
          type: string
      required:
      - errors
      - id
      type: object
    genericError:
      description: Error responses are sent when an error (e.g. unauthorized, bad
        request, ...) occurred.
      properties:
        error:
          $ref: '#/components/schemas/genericErrorPayload'
      title: Error response
      type: object
    genericErrorPayload:
      properties:
        code:
          description: Code represents the error status code (404, 403, 401, ...).
          example: 404
          format: int64
          type: integer
        debug:
          description: Debug contains debug information. This is usually not available
            and has to be enabled.
          example: The database adapter was unable to find the element
          type: string
        details:
          additionalProperties: true
          type: object
        message:
          type: string
        reason:
          type: string
        request:
          type: string
        status:
          type: string
      type: object
    healthNotReadyStatus:
      properties:
        errors:
          additionalProperties:
            type: string
          description: Errors contains a list of errors that caused the not ready
            status.
          type: object
      type: object
    healthStatus:
      properties:
        status:
          description: Status always contains "ok".
          type: string
      type: object
    jsonSchema:
      description: Raw JSON Schema
      type: object
    loginFlow:
      description: |-
        This object represents a login flow. A login flow is initiated at the "Initiate Login API / Browser Flow"
        endpoint by a client.

        Once a login flow is completed successfully, a session cookie or session token will be issued.
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        ui:
          nodes:
          - messages:
            - context: '{}'
              id: 0
              text: text
              type: type
            - context: '{}'
              id: 0
              text: text
              type: type
            type: type
            group: group
          - messages:
            - context: '{}'
              id: 0
              text: text
              type: type
            - context: '{}'
              id: 0
              text: text
              type: type
            type: type
            group: group
          method: method
          action: action
          messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
        forced: true
        active: active
        id: id
        type: type
        issued_at: 2000-01-23T04:56:07.000+00:00
        request_url: request_url
      properties:
        active:
          description: and so on.
          title: CredentialsType  represents several different credential types, like
            password credentials, passwordless credentials,
          type: string
        expires_at:
          description: |-
            ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,
            a new flow has to be initiated.
          format: date-time
          type: string
        forced:
          description: Forced stores whether this login flow should enforce re-authentication.
          type: boolean
        id:
          format: uuid4
          type: string
        issued_at:
          description: IssuedAt is the time (UTC) when the flow started.
          format: date-time
          type: string
        request_url:
          description: |-
            RequestURL is the initial URL that was requested from ORY Kratos. It can be used
            to forward information contained in the URL's path or query for example.
          type: string
        type:
          description: The flow type can either be `api` or `browser`.
          title: Type is the flow type.
          type: string
        ui:
          $ref: '#/components/schemas/uiContainer'
      required:
      - expires_at
      - id
      - issued_at
      - request_url
      - type
      - ui
      title: Login Flow
      type: object
    loginViaApiResponse:
      description: The Response for Login Flows via API
      example:
        session_token: session_token
        session:
          expires_at: 2000-01-23T04:56:07.000+00:00
          identity:
            recovery_addresses:
            - id: id
              value: value
              via: via
            - id: id
              value: value
              via: via
            traits: '{}'
            verifiable_addresses:
            - verified_at: 2000-01-23T04:56:07.000+00:00
              verified: true
              id: id
              value: value
              status: status
              via: via
            - verified_at: 2000-01-23T04:56:07.000+00:00
              verified: true
              id: id
              value: value
              status: status
              via: via
            schema_id: schema_id
            schema_url: schema_url
            id: id
          authenticated_at: 2000-01-23T04:56:07.000+00:00
          active: true
          id: id
          issued_at: 2000-01-23T04:56:07.000+00:00
      properties:
        session:
          $ref: '#/components/schemas/session'
        session_token:
          description: |-
            The Session Token

            A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization
            Header:

            Authorization: bearer ${session-token}

            The session token is only issued for API flows, not for Browser flows!
          type: string
      required:
      - session
      - session_token
      type: object
    recoveryFlow:
      description: |-
        This request is used when an identity wants to recover their account.

        We recommend reading the [Account Recovery Documentation](../self-service/flows/password-reset-account-recovery)
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        methods:
          key:
            method: method
            config:
              nodes:
              - messages:
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                type: type
                group: group
              - messages:
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                type: type
                group: group
              method: method
              action: action
              messages:
              - context: '{}'
                id: 0
                text: text
                type: type
              - context: '{}'
                id: 0
                text: text
                type: type
        active: active
        messages:
        - context: '{}'
          id: 0
          text: text
          type: type
        - context: '{}'
          id: 0
          text: text
          type: type
        id: id
        state: state
        type: type
        issued_at: 2000-01-23T04:56:07.000+00:00
        request_url: request_url
      properties:
        active:
          description: |-
            Active, if set, contains the registration method that is being used. It is initially
            not set.
          type: string
        expires_at:
          description: |-
            ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the setting,
            a new request has to be initiated.
          format: date-time
          type: string
        id:
          format: uuid4
          type: string
        issued_at:
          description: IssuedAt is the time (UTC) when the request occurred.
          format: date-time
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        methods:
          additionalProperties:
            $ref: '#/components/schemas/recoveryFlowMethod'
          description: |-
            Methods contains context for all account recovery methods. If a registration request has been
            processed, but for example the password is incorrect, this will contain error messages.
          type: object
        request_url:
          description: |-
            RequestURL is the initial URL that was requested from ORY Kratos. It can be used
            to forward information contained in the URL's path or query for example.
          type: string
        state:
          type: string
        type:
          description: The flow type can either be `api` or `browser`.
          title: Type is the flow type.
          type: string
      required:
      - expires_at
      - id
      - issued_at
      - methods
      - request_url
      - state
      title: A Recovery Flow
      type: object
    recoveryFlowMethod:
      example:
        method: method
        config:
          nodes:
          - messages:
            - context: '{}'
              id: 0
              text: text
              type: type
            - context: '{}'
              id: 0
              text: text
              type: type
            type: type
            group: group
          - messages:
            - context: '{}'
              id: 0
              text: text
              type: type
            - context: '{}'
              id: 0
              text: text
              type: type
            type: type
            group: group
          method: method
          action: action
          messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
      properties:
        config:
          $ref: '#/components/schemas/recoveryFlowMethodConfig'
        method:
          description: Method contains the request credentials type.
          type: string
      required:
      - config
      - method
      type: object
    recoveryFlowMethodConfig:
      example:
        nodes:
        - messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          type: type
          group: group
        - messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          type: type
          group: group
        method: method
        action: action
        messages:
        - context: '{}'
          id: 0
          text: text
          type: type
        - context: '{}'
          id: 0
          text: text
          type: type
      properties:
        action:
          description: Action should be used as the form action URL `<form action="{{
            .Action }}" method="post">`.
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        method:
          description: Method is the form method (e.g. POST)
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/uiNode'
          type: array
      required:
      - action
      - method
      - nodes
      type: object
    recoveryFlowMethodConfigPayload:
      properties:
        action:
          description: Action should be used as the form action URL `<form action="{{
            .Action }}" method="post">`.
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        method:
          description: Method is the form method (e.g. POST)
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/uiNode'
          type: array
      required:
      - action
      - method
      - nodes
      type: object
    recoveryLink:
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        recovery_link: recovery_link
      properties:
        expires_at:
          description: |-
            Recovery Link Expires At

            The timestamp when the recovery link expires.
          format: date-time
          type: string
        recovery_link:
          description: |-
            Recovery Link

            This link can be used to recover the account.
          type: string
      required:
      - recovery_link
      type: object
    registrationFlow:
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        methods:
          key:
            method: method
            config:
              nodes:
              - messages:
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                type: type
                group: group
              - messages:
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                type: type
                group: group
              method: method
              action: action
              messages:
              - context: '{}'
                id: 0
                text: text
                type: type
              - context: '{}'
                id: 0
                text: text
                type: type
              providers:
              - null
              - null
        active: active
        messages:
        - context: '{}'
          id: 0
          text: text
          type: type
        - context: '{}'
          id: 0
          text: text
          type: type
        id: id
        type: type
        issued_at: 2000-01-23T04:56:07.000+00:00
        request_url: request_url
      properties:
        active:
          description: and so on.
          title: CredentialsType  represents several different credential types, like
            password credentials, passwordless credentials,
          type: string
        expires_at:
          description: |-
            ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,
            a new flow has to be initiated.
          format: date-time
          type: string
        id:
          format: uuid4
          type: string
        issued_at:
          description: IssuedAt is the time (UTC) when the flow occurred.
          format: date-time
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        methods:
          additionalProperties:
            $ref: '#/components/schemas/registrationFlowMethod'
          description: |-
            Methods contains context for all enabled registration methods. If a registration flow has been
            processed, but for example the password is incorrect, this will contain error messages.
          type: object
        request_url:
          description: |-
            RequestURL is the initial URL that was requested from ORY Kratos. It can be used
            to forward information contained in the URL's path or query for example.
          type: string
        type:
          description: The flow type can either be `api` or `browser`.
          title: Type is the flow type.
          type: string
      required:
      - expires_at
      - id
      - issued_at
      - methods
      - request_url
      type: object
    registrationFlowMethod:
      example:
        method: method
        config:
          nodes:
          - messages:
            - context: '{}'
              id: 0
              text: text
              type: type
            - context: '{}'
              id: 0
              text: text
              type: type
            type: type
            group: group
          - messages:
            - context: '{}'
              id: 0
              text: text
              type: type
            - context: '{}'
              id: 0
              text: text
              type: type
            type: type
            group: group
          method: method
          action: action
          messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          providers:
          - null
          - null
      properties:
        config:
          $ref: '#/components/schemas/registrationFlowMethodConfig'
        method:
          description: and so on.
          title: CredentialsType  represents several different credential types, like
            password credentials, passwordless credentials,
          type: string
      required:
      - config
      - method
      type: object
    registrationFlowMethodConfig:
      example:
        nodes:
        - messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          type: type
          group: group
        - messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          type: type
          group: group
        method: method
        action: action
        messages:
        - context: '{}'
          id: 0
          text: text
          type: type
        - context: '{}'
          id: 0
          text: text
          type: type
        providers:
        - null
        - null
      properties:
        action:
          description: Action should be used as the form action URL `<form action="{{
            .Action }}" method="post">`.
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        method:
          description: Method is the form method (e.g. POST)
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/uiNode'
          type: array
        providers:
          description: Providers is set for the "oidc" registration method.
          items:
            $ref: '#/components/schemas/uiNodes'
          type: array
      required:
      - action
      - method
      - nodes
      type: object
    registrationFlowMethodConfigPayload:
      properties:
        action:
          description: Action should be used as the form action URL `<form action="{{
            .Action }}" method="post">`.
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        method:
          description: Method is the form method (e.g. POST)
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/uiNode'
          type: array
        providers:
          description: Providers is set for the "oidc" registration method.
          items:
            $ref: '#/components/schemas/uiNodes'
          type: array
      required:
      - action
      - method
      - nodes
      type: object
    registrationViaApiResponse:
      description: The Response for Registration Flows via API
      example:
        session_token: session_token
        identity:
          recovery_addresses:
          - id: id
            value: value
            via: via
          - id: id
            value: value
            via: via
          traits: '{}'
          verifiable_addresses:
          - verified_at: 2000-01-23T04:56:07.000+00:00
            verified: true
            id: id
            value: value
            status: status
            via: via
          - verified_at: 2000-01-23T04:56:07.000+00:00
            verified: true
            id: id
            value: value
            status: status
            via: via
          schema_id: schema_id
          schema_url: schema_url
          id: id
        session:
          expires_at: 2000-01-23T04:56:07.000+00:00
          identity:
            recovery_addresses:
            - id: id
              value: value
              via: via
            - id: id
              value: value
              via: via
            traits: '{}'
            verifiable_addresses:
            - verified_at: 2000-01-23T04:56:07.000+00:00
              verified: true
              id: id
              value: value
              status: status
              via: via
            - verified_at: 2000-01-23T04:56:07.000+00:00
              verified: true
              id: id
              value: value
              status: status
              via: via
            schema_id: schema_id
            schema_url: schema_url
            id: id
          authenticated_at: 2000-01-23T04:56:07.000+00:00
          active: true
          id: id
          issued_at: 2000-01-23T04:56:07.000+00:00
      properties:
        identity:
          $ref: '#/components/schemas/Identity'
        session:
          $ref: '#/components/schemas/session'
        session_token:
          description: |-
            The Session Token

            This field is only set when the session hook is configured as a post-registration hook.

            A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization
            Header:

            Authorization: bearer ${session-token}

            The session token is only issued for API flows, not for Browser flows!
          type: string
      required:
      - identity
      - session_token
      type: object
    revokeSession:
      properties:
        session_token:
          description: |-
            The Session Token

            Invalidate this session token.
          type: string
      required:
      - session_token
      type: object
    session:
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        identity:
          recovery_addresses:
          - id: id
            value: value
            via: via
          - id: id
            value: value
            via: via
          traits: '{}'
          verifiable_addresses:
          - verified_at: 2000-01-23T04:56:07.000+00:00
            verified: true
            id: id
            value: value
            status: status
            via: via
          - verified_at: 2000-01-23T04:56:07.000+00:00
            verified: true
            id: id
            value: value
            status: status
            via: via
          schema_id: schema_id
          schema_url: schema_url
          id: id
        authenticated_at: 2000-01-23T04:56:07.000+00:00
        active: true
        id: id
        issued_at: 2000-01-23T04:56:07.000+00:00
      properties:
        active:
          type: boolean
        authenticated_at:
          format: date-time
          type: string
        expires_at:
          format: date-time
          type: string
        id:
          format: uuid4
          type: string
        identity:
          $ref: '#/components/schemas/Identity'
        issued_at:
          format: date-time
          type: string
      required:
      - authenticated_at
      - expires_at
      - id
      - identity
      - issued_at
      type: object
    settingsFlow:
      description: |-
        This flow is used when an identity wants to update settings
        (e.g. profile data, passwords, ...) in a selfservice manner.

        We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        identity:
          recovery_addresses:
          - id: id
            value: value
            via: via
          - id: id
            value: value
            via: via
          traits: '{}'
          verifiable_addresses:
          - verified_at: 2000-01-23T04:56:07.000+00:00
            verified: true
            id: id
            value: value
            status: status
            via: via
          - verified_at: 2000-01-23T04:56:07.000+00:00
            verified: true
            id: id
            value: value
            status: status
            via: via
          schema_id: schema_id
          schema_url: schema_url
          id: id
        methods:
          key:
            method: method
            config:
              nodes:
              - messages:
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                type: type
                group: group
              - messages:
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                type: type
                group: group
              method: method
              action: action
              messages:
              - context: '{}'
                id: 0
                text: text
                type: type
              - context: '{}'
                id: 0
                text: text
                type: type
        active: active
        messages:
        - context: '{}'
          id: 0
          text: text
          type: type
        - context: '{}'
          id: 0
          text: text
          type: type
        id: id
        state: state
        type: type
        issued_at: 2000-01-23T04:56:07.000+00:00
        request_url: request_url
      properties:
        active:
          description: |-
            Active, if set, contains the registration method that is being used. It is initially
            not set.
          type: string
        expires_at:
          description: |-
            ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting,
            a new flow has to be initiated.
          format: date-time
          type: string
        id:
          format: uuid4
          type: string
        identity:
          $ref: '#/components/schemas/Identity'
        issued_at:
          description: IssuedAt is the time (UTC) when the flow occurred.
          format: date-time
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        methods:
          additionalProperties:
            $ref: '#/components/schemas/settingsFlowMethod'
          description: |-
            Methods contains context for all enabled registration methods. If a settings flow has been
            processed, but for example the first name is empty, this will contain error messages.
          type: object
        request_url:
          description: |-
            RequestURL is the initial URL that was requested from ORY Kratos. It can be used
            to forward information contained in the URL's path or query for example.
          type: string
        state:
          type: string
        type:
          description: The flow type can either be `api` or `browser`.
          title: Type is the flow type.
          type: string
      required:
      - expires_at
      - id
      - identity
      - issued_at
      - methods
      - request_url
      - state
      title: Flow represents a Settings Flow
      type: object
    settingsFlowMethod:
      example:
        method: method
        config:
          nodes:
          - messages:
            - context: '{}'
              id: 0
              text: text
              type: type
            - context: '{}'
              id: 0
              text: text
              type: type
            type: type
            group: group
          - messages:
            - context: '{}'
              id: 0
              text: text
              type: type
            - context: '{}'
              id: 0
              text: text
              type: type
            type: type
            group: group
          method: method
          action: action
          messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
      properties:
        config:
          $ref: '#/components/schemas/settingsFlowMethodConfig'
        method:
          description: Method is the name of this flow method.
          type: string
      required:
      - config
      - method
      type: object
    settingsFlowMethodConfig:
      example:
        nodes:
        - messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          type: type
          group: group
        - messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          type: type
          group: group
        method: method
        action: action
        messages:
        - context: '{}'
          id: 0
          text: text
          type: type
        - context: '{}'
          id: 0
          text: text
          type: type
      properties:
        action:
          description: Action should be used as the form action URL `<form action="{{
            .Action }}" method="post">`.
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        method:
          description: Method is the form method (e.g. POST)
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/uiNode'
          type: array
      required:
      - action
      - method
      - nodes
      type: object
    settingsFlowMethodConfigPayload:
      properties:
        action:
          description: Action should be used as the form action URL `<form action="{{
            .Action }}" method="post">`.
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        method:
          description: Method is the form method (e.g. POST)
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/uiNode'
          type: array
      required:
      - action
      - method
      - nodes
      type: object
    settingsProfileFormConfig:
      properties:
        action:
          description: Action should be used as the form action URL `<form action="{{
            .Action }}" method="post">`.
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        method:
          description: Method is the form method (e.g. POST)
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/uiNode'
          type: array
      required:
      - action
      - method
      - nodes
      type: object
    settingsViaApiResponse:
      description: The Response for Settings Flows via API
      example:
        identity:
          recovery_addresses:
          - id: id
            value: value
            via: via
          - id: id
            value: value
            via: via
          traits: '{}'
          verifiable_addresses:
          - verified_at: 2000-01-23T04:56:07.000+00:00
            verified: true
            id: id
            value: value
            status: status
            via: via
          - verified_at: 2000-01-23T04:56:07.000+00:00
            verified: true
            id: id
            value: value
            status: status
            via: via
          schema_id: schema_id
          schema_url: schema_url
          id: id
        flow:
          expires_at: 2000-01-23T04:56:07.000+00:00
          identity:
            recovery_addresses:
            - id: id
              value: value
              via: via
            - id: id
              value: value
              via: via
            traits: '{}'
            verifiable_addresses:
            - verified_at: 2000-01-23T04:56:07.000+00:00
              verified: true
              id: id
              value: value
              status: status
              via: via
            - verified_at: 2000-01-23T04:56:07.000+00:00
              verified: true
              id: id
              value: value
              status: status
              via: via
            schema_id: schema_id
            schema_url: schema_url
            id: id
          methods:
            key:
              method: method
              config:
                nodes:
                - messages:
                  - context: '{}'
                    id: 0
                    text: text
                    type: type
                  - context: '{}'
                    id: 0
                    text: text
                    type: type
                  type: type
                  group: group
                - messages:
                  - context: '{}'
                    id: 0
                    text: text
                    type: type
                  - context: '{}'
                    id: 0
                    text: text
                    type: type
                  type: type
                  group: group
                method: method
                action: action
                messages:
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                - context: '{}'
                  id: 0
                  text: text
                  type: type
          active: active
          messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          id: id
          state: state
          type: type
          issued_at: 2000-01-23T04:56:07.000+00:00
          request_url: request_url
      properties:
        flow:
          $ref: '#/components/schemas/settingsFlow'
        identity:
          $ref: '#/components/schemas/Identity'
      required:
      - flow
      - identity
      type: object
    uiContainer:
      description: Container represents a HTML Form. The container can work with both
        HTTP Form and JSON requests
      example:
        nodes:
        - messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          type: type
          group: group
        - messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          type: type
          group: group
        method: method
        action: action
        messages:
        - context: '{}'
          id: 0
          text: text
          type: type
        - context: '{}'
          id: 0
          text: text
          type: type
      properties:
        action:
          description: Action should be used as the form action URL `<form action="{{
            .Action }}" method="post">`.
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        method:
          description: Method is the form method (e.g. POST)
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/uiNode'
          type: array
      required:
      - action
      - method
      - nodes
      type: object
    uiNode:
      description: |-
        Nodes are represented as HTML elements or their native UI equivalents. For example,
        a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
      example:
        messages:
        - context: '{}'
          id: 0
          text: text
          type: type
        - context: '{}'
          id: 0
          text: text
          type: type
        type: type
        group: group
      properties:
        attributes:
          $ref: '#/components/schemas/uiNodeAttributes'
        group:
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        type:
          type: string
      required:
      - attributes
      - group
      - messages
      - type
      title: Node represents a flow's nodes
      type: object
    uiNodeAnchorAttributes:
      properties:
        href:
          description: |-
            The link's href (destination) URL.

            format: uri
          type: string
        title:
          $ref: '#/components/schemas/uiText'
      required:
      - href
      - title
      title: AnchorAttributes represents the attributes of an anchor node.
      type: object
    uiNodeAttributes:
      oneOf:
      - $ref: '#/components/schemas/uiNodeInputAttributes'
      - $ref: '#/components/schemas/uiNodeTextAttributes'
      - $ref: '#/components/schemas/uiNodeImageAttributes'
      - $ref: '#/components/schemas/uiNodeAnchorAttributes'
      title: Attributes represents a list of attributes (e.g. `href="foo"` for links).
    uiNodeGroup:
      type: string
    uiNodeImageAttributes:
      properties:
        src:
          description: |-
            The image's source URL.

            format: uri
          type: string
      required:
      - src
      title: ImageAttributes represents the attributes of an image node.
      type: object
    uiNodeInputAttributeType:
      type: string
    uiNodeInputAttributes:
      description: InputAttributes represents the attributes of an input node
      properties:
        disabled:
          description: Sets the input's disabled field to true or false.
          type: boolean
        label:
          $ref: '#/components/schemas/uiText'
        name:
          description: The input's element name.
          type: string
        pattern:
          description: The input's pattern.
          type: string
        required:
          description: Mark this input field as required.
          type: boolean
        type:
          type: string
        value:
          $ref: '#/components/schemas/uiNodeInputAttributesValue'
      required:
      - disabled
      - name
      - type
      type: object
    uiNodeInputAttributesValue:
      oneOf:
      - type: string
      - type: number
      - type: boolean
    uiNodeTextAttributes:
      properties:
        text:
          $ref: '#/components/schemas/uiText'
      required:
      - text
      title: TextAttributes represents the attributes of a text node.
      type: object
    uiNodeType:
      type: string
    uiNodes:
      items:
        $ref: '#/components/schemas/uiNode'
      type: array
    uiText:
      example:
        context: '{}'
        id: 0
        text: text
        type: type
      properties:
        context:
          description: The message's context. Useful when customizing messages.
          type: object
        id:
          format: int64
          type: integer
        text:
          description: The message text. Written in american english.
          type: string
        type:
          type: string
      required:
      - id
      - text
      - type
      type: object
    uiTextType:
      type: string
    uiTexts:
      items:
        $ref: '#/components/schemas/uiText'
      type: array
    verificationFlow:
      description: |-
        Used to verify an out-of-band communication
        channel such as an email address or a phone number.

        For more information head over to: https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        methods:
          key:
            method: method
            config:
              nodes:
              - messages:
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                type: type
                group: group
              - messages:
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                - context: '{}'
                  id: 0
                  text: text
                  type: type
                type: type
                group: group
              method: method
              action: action
              messages:
              - context: '{}'
                id: 0
                text: text
                type: type
              - context: '{}'
                id: 0
                text: text
                type: type
        active: active
        messages:
        - context: '{}'
          id: 0
          text: text
          type: type
        - context: '{}'
          id: 0
          text: text
          type: type
        id: id
        state: state
        type: type
        issued_at: 2000-01-23T04:56:07.000+00:00
        request_url: request_url
      properties:
        active:
          description: |-
            Active, if set, contains the registration method that is being used. It is initially
            not set.
          type: string
        expires_at:
          description: |-
            ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address,
            a new request has to be initiated.
          format: date-time
          type: string
        id:
          format: uuid4
          type: string
        issued_at:
          description: IssuedAt is the time (UTC) when the request occurred.
          format: date-time
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        methods:
          additionalProperties:
            $ref: '#/components/schemas/verificationFlowMethod'
          description: |-
            Methods contains context for all account verification methods. If a registration request has been
            processed, but for example the password is incorrect, this will contain error messages.
          type: object
        request_url:
          description: |-
            RequestURL is the initial URL that was requested from ORY Kratos. It can be used
            to forward information contained in the URL's path or query for example.
          type: string
        state:
          type: string
        type:
          description: The flow type can either be `api` or `browser`.
          title: Type is the flow type.
          type: string
      required:
      - id
      - methods
      - state
      - type
      title: A Verification Flow
      type: object
    verificationFlowMethod:
      example:
        method: method
        config:
          nodes:
          - messages:
            - context: '{}'
              id: 0
              text: text
              type: type
            - context: '{}'
              id: 0
              text: text
              type: type
            type: type
            group: group
          - messages:
            - context: '{}'
              id: 0
              text: text
              type: type
            - context: '{}'
              id: 0
              text: text
              type: type
            type: type
            group: group
          method: method
          action: action
          messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
      properties:
        config:
          $ref: '#/components/schemas/verificationFlowMethodConfig'
        method:
          description: Method contains the request credentials type.
          type: string
      required:
      - config
      - method
      type: object
    verificationFlowMethodConfig:
      example:
        nodes:
        - messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          type: type
          group: group
        - messages:
          - context: '{}'
            id: 0
            text: text
            type: type
          - context: '{}'
            id: 0
            text: text
            type: type
          type: type
          group: group
        method: method
        action: action
        messages:
        - context: '{}'
          id: 0
          text: text
          type: type
        - context: '{}'
          id: 0
          text: text
          type: type
      properties:
        action:
          description: Action should be used as the form action URL `<form action="{{
            .Action }}" method="post">`.
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        method:
          description: Method is the form method (e.g. POST)
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/uiNode'
          type: array
      required:
      - action
      - method
      - nodes
      type: object
    verificationFlowMethodConfigPayload:
      properties:
        action:
          description: Action should be used as the form action URL `<form action="{{
            .Action }}" method="post">`.
          type: string
        messages:
          items:
            $ref: '#/components/schemas/uiText'
          type: array
        method:
          description: Method is the form method (e.g. POST)
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/uiNode'
          type: array
      required:
      - action
      - method
      - nodes
      type: object
    version:
      properties:
        version:
          description: Version is the service's version.
          type: string
      type: object
    inline_response_200:
      example:
        status: status
      properties:
        status:
          description: Always "ok".
          type: string
      required:
      - status
      type: object
    inline_response_503:
      properties:
        errors:
          additionalProperties:
            type: string
          description: Errors contains a list of errors that caused the not ready
            status.
          type: object
      required:
      - errors
      type: object
    inline_response_200_1:
      example:
        version: version
      properties:
        version:
          description: The version of Ory Kratos.
          type: string
      required:
      - version
      type: object
  securitySchemes:
    sessionCookie:
      in: cookie
      name: ory_kratos_session
      type: apiKey
    sessionToken:
      in: header
      name: X-Session-Token
      type: apiKey
x-forwarded-proto: string
x-request-id: string
