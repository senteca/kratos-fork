// Code generated by go-swagger; DO NOT EDIT.

package public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCompleteSelfServiceLoginFlowWithPasswordMethodParams creates a new CompleteSelfServiceLoginFlowWithPasswordMethodParams object
// with the default values initialized.
func NewCompleteSelfServiceLoginFlowWithPasswordMethodParams() *CompleteSelfServiceLoginFlowWithPasswordMethodParams {
	var ()
	return &CompleteSelfServiceLoginFlowWithPasswordMethodParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCompleteSelfServiceLoginFlowWithPasswordMethodParamsWithTimeout creates a new CompleteSelfServiceLoginFlowWithPasswordMethodParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCompleteSelfServiceLoginFlowWithPasswordMethodParamsWithTimeout(timeout time.Duration) *CompleteSelfServiceLoginFlowWithPasswordMethodParams {
	var ()
	return &CompleteSelfServiceLoginFlowWithPasswordMethodParams{

		timeout: timeout,
	}
}

// NewCompleteSelfServiceLoginFlowWithPasswordMethodParamsWithContext creates a new CompleteSelfServiceLoginFlowWithPasswordMethodParams object
// with the default values initialized, and the ability to set a context for a request
func NewCompleteSelfServiceLoginFlowWithPasswordMethodParamsWithContext(ctx context.Context) *CompleteSelfServiceLoginFlowWithPasswordMethodParams {
	var ()
	return &CompleteSelfServiceLoginFlowWithPasswordMethodParams{

		Context: ctx,
	}
}

// NewCompleteSelfServiceLoginFlowWithPasswordMethodParamsWithHTTPClient creates a new CompleteSelfServiceLoginFlowWithPasswordMethodParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCompleteSelfServiceLoginFlowWithPasswordMethodParamsWithHTTPClient(client *http.Client) *CompleteSelfServiceLoginFlowWithPasswordMethodParams {
	var ()
	return &CompleteSelfServiceLoginFlowWithPasswordMethodParams{
		HTTPClient: client,
	}
}

/*CompleteSelfServiceLoginFlowWithPasswordMethodParams contains all the parameters to send to the API endpoint
for the complete self service login flow with password method operation typically these are written to a http.Request
*/
type CompleteSelfServiceLoginFlowWithPasswordMethodParams struct {

	/*Flow
	  The Flow ID

	*/
	Flow string
	/*Identifier*/
	Identifier *string
	/*Password*/
	Password *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) WithTimeout(timeout time.Duration) *CompleteSelfServiceLoginFlowWithPasswordMethodParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) WithContext(ctx context.Context) *CompleteSelfServiceLoginFlowWithPasswordMethodParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) WithHTTPClient(client *http.Client) *CompleteSelfServiceLoginFlowWithPasswordMethodParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFlow adds the flow to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) WithFlow(flow string) *CompleteSelfServiceLoginFlowWithPasswordMethodParams {
	o.SetFlow(flow)
	return o
}

// SetFlow adds the flow to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) SetFlow(flow string) {
	o.Flow = flow
}

// WithIdentifier adds the identifier to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) WithIdentifier(identifier *string) *CompleteSelfServiceLoginFlowWithPasswordMethodParams {
	o.SetIdentifier(identifier)
	return o
}

// SetIdentifier adds the identifier to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) SetIdentifier(identifier *string) {
	o.Identifier = identifier
}

// WithPassword adds the password to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) WithPassword(password *string) *CompleteSelfServiceLoginFlowWithPasswordMethodParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the complete self service login flow with password method params
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) SetPassword(password *string) {
	o.Password = password
}

// WriteToRequest writes these params to a swagger request
func (o *CompleteSelfServiceLoginFlowWithPasswordMethodParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param flow
	qrFlow := o.Flow
	qFlow := qrFlow
	if qFlow != "" {
		if err := r.SetQueryParam("flow", qFlow); err != nil {
			return err
		}
	}

	if o.Identifier != nil {

		// query param identifier
		var qrIdentifier string
		if o.Identifier != nil {
			qrIdentifier = *o.Identifier
		}
		qIdentifier := qrIdentifier
		if qIdentifier != "" {
			if err := r.SetQueryParam("identifier", qIdentifier); err != nil {
				return err
			}
		}

	}

	if o.Password != nil {

		// query param password
		var qrPassword string
		if o.Password != nil {
			qrPassword = *o.Password
		}
		qPassword := qrPassword
		if qPassword != "" {
			if err := r.SetQueryParam("password", qPassword); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
