// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../contrib/sql/migrations/postgres/1.sql (2.284kB)
// ../contrib/sql/migrations/postgres/2.sql (359B)
// ../contrib/sql/migrations/tests/1_test.sql (758B)
// ../contrib/sql/migrations/tests/2_test.sql (1.1kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ContribSqlMigrationsPostgres1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4b\x6f\x9b\x4c\x14\xdd\xf3\x2b\xee\x0e\xd0\x97\x48\x9f\x5a\xa5\x8b\x44\xaa\x44\x60\xdc\xa0\x60\xec\xf2\x68\x92\x6e\xd0\x14\xc6\xf6\xd4\x36\xd0\x99\x71\x1e\xaa\xfa\xdf\x2b\x5e\x06\x63\xc0\x38\xf5\x0e\xfb\x9c\x33\x77\xce\x3d\xf7\x9a\xcb\x4b\xf8\x6f\x4b\x97\x0c\x0b\x02\x7e\x2a\xe9\x0e\xd2\x3c\x04\xde\xd3\x1c\x41\xc8\x48\x44\x62\x41\xf1\x86\x07\xe2\x2d\x25\xa0\xb9\x80\x6c\x7f\x0a\x8a\x9c\xd0\x28\x94\x2f\x40\x4e\x31\xe7\x2f\x09\x8b\x64\xf5\xe6\x80\xca\xc9\x66\x11\x70\xc2\x9e\x69\x48\x02\x46\x7e\xed\x08\x17\x6d\x8d\x4d\xb2\xa4\x71\x26\xc2\xc8\x92\x72\xc1\xb0\xa0\x49\x9c\x09\xed\x95\xb4\x5b\x0b\x81\x39\x01\x7b\xe6\x01\x7a\x34\x5d\xcf\x05\x9a\x57\x24\xde\x24\x45\x02\x00\x48\xd7\xd0\xfa\xdc\x9a\x5f\x5c\xe4\x98\x9a\x05\x73\xc7\x9c\x6a\xce\x13\xdc\xa3\xa7\x8b\x1c\x4c\xa3\x36\xf8\x9b\xe6\xe8\x77\x9a\xa3\x7c\xb8\xba\x52\xf3\x53\x6c\xdf\xb2\xc0\xb7\xcd\xaf\x3e\x2a\x38\x82\x61\x2a\x78\x93\xf3\x93\x27\xf1\x8f\xea\x61\xcf\x31\xd0\x44\xf3\x2d\x0f\xe4\xdf\x7f\xe4\xeb\xeb\x1c\xd3\x14\x08\x78\xb8\x22\x5b\x1c\xec\xd8\x06\x04\x79\x15\xd0\x16\x90\x46\xde\x3b\xa8\x9b\xd2\x61\xc1\xe0\xe5\x4b\x81\x74\x9d\xc1\x4c\xdb\x03\x07\x4d\x90\x83\x6c\x1d\xd5\xf2\xa0\xa4\x6b\x15\x66\x36\x18\xc8\x42\x1e\x02\x5d\x73\x75\xcd\x28\xbd\xd8\x12\xb1\x4a\x4a\x0f\x8f\xb2\x51\x5d\xa4\x80\x86\x49\xbc\xa0\xcb\x0e\xc3\x4e\x99\xf6\x0e\x1f\x82\xe2\xbb\x05\x25\xac\x37\x15\xa3\xdd\x69\xc8\x0e\x1a\xd5\x00\x0e\x7a\x56\xd7\x76\x66\xf0\xf4\x3b\xa4\xdf\x83\xb2\x21\xf1\x52\xac\x94\x5a\x46\x85\xcf\xf0\xbf\x7a\xca\xa6\xae\xf9\xeb\x31\xe7\x8c\x81\xa9\xaa\xfe\xf8\x49\x6d\x59\xdb\x79\x05\xf2\x9a\x52\x46\x78\x80\xcb\xb8\x7b\xe6\x14\xb9\x9e\x36\x9d\xc3\x83\xe9\xdd\xe5\x8f\xf0\x7d\x66\x23\x68\x85\x87\x72\xbe\x23\xd1\x9e\x36\x82\xb7\x4f\x92\x3d\x7b\x50\xd4\x42\xa5\xda\x3a\xd9\xc8\xe5\x83\xd8\x1c\xbb\xce\xe2\x0f\x79\x2b\x82\x23\xc2\xf8\x71\x7c\x47\xe5\xb8\xd0\xc2\xa1\xa0\xcf\xa4\x66\x1c\x4d\x4d\xad\xb5\x3f\xbf\x98\xb2\x7a\xe5\xfc\xcb\xf9\x6b\x1a\x1f\xb4\xb0\x7f\x2d\x8f\xdd\x43\x9c\x70\x4e\x93\xb8\x6f\xd0\x06\xc2\xc4\x47\xa7\x69\x54\x98\xfa\x53\x31\x1c\xa6\xd3\xbc\xae\x30\xe1\x9d\x58\x65\x8d\x0b\xb1\x28\xc4\xde\xa5\xd2\xdc\xc1\x95\x5d\xe7\x2d\xe2\x66\x7b\x0a\x77\xc0\xb4\x0d\xf4\x08\x31\xde\x92\x0c\xde\xd5\x61\x50\x68\x74\x91\x67\x21\x63\x37\xff\xf0\x8d\xe4\x25\x96\x0c\x67\x36\x2f\x7b\x3d\xbc\x5d\x6f\x4e\x40\x0f\x7e\x2f\x83\xd2\xc9\x69\x01\x8f\x2b\xae\x00\xd9\xab\x84\x39\xa9\xb2\xd7\x9e\x9e\x6e\x54\x6f\xc6\x6f\xa4\xbf\x01\x00\x00\xff\xff\x21\x00\xe7\x1b\xec\x08\x00\x00")

func ContribSqlMigrationsPostgres1SqlBytes() ([]byte, error) {
	return bindataRead(
		_ContribSqlMigrationsPostgres1Sql,
		"../contrib/sql/migrations/postgres/1.sql",
	)
}

func ContribSqlMigrationsPostgres1Sql() (*asset, error) {
	bytes, err := ContribSqlMigrationsPostgres1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../contrib/sql/migrations/postgres/1.sql", size: 2284, mode: os.FileMode(0644), modTime: time.Unix(1571236390, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0xf1, 0xff, 0x23, 0x86, 0xfd, 0x23, 0x68, 0xe8, 0xe3, 0xdc, 0x67, 0xfd, 0x17, 0x6b, 0x3a, 0xcb, 0x40, 0xee, 0x1a, 0x31, 0x7d, 0x8a, 0xe9, 0x86, 0x61, 0xca, 0xf4, 0x56, 0xd0, 0xb8, 0x48}}
	return a, nil
}

var _ContribSqlMigrationsPostgres2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x4e\xc3\x30\x10\x44\xef\xfe\x8a\x39\x82\xa0\x5f\xd0\x93\x43\xb6\xb0\xc2\x89\x83\x63\x0b\xca\x25\x0a\xb0\x45\x81\x92\x54\x76\x45\x7f\x1f\x35\xe9\xa1\x12\x55\xe6\xb6\xd2\x1b\xcd\xea\x2d\x16\xb8\xf9\xe9\x3e\x63\xbb\x17\x84\x9d\xba\x73\xa4\x3d\xc1\xeb\xcc\x10\x78\x85\xd2\x7a\xd0\x0b\xd7\xbe\x46\x92\xed\xa6\x49\x12\x7f\xbb\x77\x69\x24\xc6\x21\xaa\x2b\x05\x00\xbb\x6f\x4c\xc9\xf8\xbe\x26\xc7\xda\xa0\x72\x5c\x68\xb7\xc6\x23\xad\x6f\x47\xa6\xfb\x38\x31\x21\x70\x8e\x4b\x39\x2e\x95\xc1\x18\x84\x92\x9f\x02\x4d\xb5\x71\x26\x01\xf8\x4a\x43\xff\x36\x57\x9b\xf8\x24\xd2\x37\xed\x1e\xf0\x5c\x50\xed\x75\x51\xe1\x99\xfd\xc3\x78\xe2\xd5\x96\x74\xc6\x1e\xda\xd4\x1c\x79\x64\xd6\x9a\xf9\x97\x72\x5a\xe9\x60\x3c\x36\xed\x36\x89\xba\x5e\x2a\x75\xae\x2d\x1f\x0e\xbd\xca\x9d\xad\x4e\xda\xfe\x8b\x5a\xaa\xbf\x00\x00\x00\xff\xff\x18\xf7\xfe\xfd\x67\x01\x00\x00")

func ContribSqlMigrationsPostgres2SqlBytes() ([]byte, error) {
	return bindataRead(
		_ContribSqlMigrationsPostgres2Sql,
		"../contrib/sql/migrations/postgres/2.sql",
	)
}

func ContribSqlMigrationsPostgres2Sql() (*asset, error) {
	bytes, err := ContribSqlMigrationsPostgres2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../contrib/sql/migrations/postgres/2.sql", size: 359, mode: os.FileMode(0644), modTime: time.Unix(1572877373, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x12, 0x26, 0xb8, 0xf9, 0xce, 0x77, 0xb4, 0x76, 0x0, 0xae, 0xac, 0xce, 0xac, 0x85, 0x94, 0x4a, 0x6e, 0x38, 0x6f, 0x64, 0x1f, 0x3a, 0x38, 0x97, 0x58, 0x9f, 0x26, 0x54, 0x7e, 0xb3, 0xe}}
	return a, nil
}

var _ContribSqlMigrationsTests1_testSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x52\xc1\x4e\xc2\x40\x10\xbd\xf7\x2b\x26\xbd\xb4\xc4\x05\xc2\x15\x2f\x9a\xc8\x81\xc4\x40\x22\xa0\xc7\x66\xdd\x9d\xb6\x13\xda\x6e\xdd\xd9\x52\x88\xe1\xdf\x4d\x4b\x95\xa2\xc4\x78\xf2\x34\xd3\xd7\xc9\x7b\x33\xfb\xde\x70\x08\x37\x39\x25\x56\x3a\x84\x4d\xe9\xcd\x17\xab\xd9\xd3\x1a\xe6\x8b\xf5\x12\x48\x63\xe1\xc8\x1d\x20\x24\x2d\xc0\x59\x49\x8e\x23\x56\x29\xe6\x32\xaa\x6c\x36\xf0\x9e\xef\x1f\x37\xb3\x15\x84\x81\x96\x4e\x0e\x27\x81\x80\x20\x36\x26\x18\xdc\x7a\x57\x79\x22\x65\xb1\x6d\x65\xd6\x50\x76\x60\xb9\x15\x90\xa3\x4b\x8d\x16\xa0\x4c\x11\x53\x72\x26\x9e\x08\x08\x4a\xc9\x5c\x1b\xab\x1b\xf6\x77\x3f\x36\xc6\x9f\xfa\xaf\xd2\xfa\xc7\xbf\xe8\x44\x27\x2c\x26\xb4\x3d\xc9\xde\xff\x46\xfd\x3c\x73\xa9\x7c\xba\xea\x0e\xf7\x32\x2f\x33\x1c\x19\x9b\xfc\xb7\xa4\x32\xf9\x0f\x49\xc6\x2c\x8e\x18\xed\x8e\x14\x46\x16\xdf\x2a\x64\x77\x72\x08\xf7\x25\x59\xe4\x48\x3a\x01\xc4\x5c\xa1\x6e\xdb\x6e\xa6\xb1\xec\xfc\x91\xa2\xd4\x68\x59\x80\x54\x8e\x76\xf8\x69\x01\x0b\xd8\x52\xa1\x2f\x96\x5a\x2c\x5f\xc2\xc1\x57\x09\x52\xe7\x4a\x9e\x8e\xc7\x75\x5d\x8f\x8c\x3d\x8c\x38\x1d\xb7\xd6\x1c\x83\xef\x66\xb5\x48\x66\x12\x2a\xae\x1c\xc1\x4c\xa6\x80\x90\x7f\x59\x5c\x56\x2e\x6d\x9e\x49\x49\xd7\x21\xbd\xd0\xf4\xd2\xc7\xa4\xdb\xf0\x5d\x2e\xda\x95\x49\x23\xdd\x0f\xf9\x83\xa9\x0b\xef\x23\x00\x00\xff\xff\x3c\xee\x8d\x2f\xf6\x02\x00\x00")

func ContribSqlMigrationsTests1_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_ContribSqlMigrationsTests1_testSql,
		"../contrib/sql/migrations/tests/1_test.sql",
	)
}

func ContribSqlMigrationsTests1_testSql() (*asset, error) {
	bytes, err := ContribSqlMigrationsTests1_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../contrib/sql/migrations/tests/1_test.sql", size: 758, mode: os.FileMode(0644), modTime: time.Unix(1565964771, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x19, 0xa2, 0xa9, 0x4b, 0x9f, 0x7a, 0x6b, 0x26, 0x64, 0xcb, 0x9d, 0xe2, 0x41, 0xea, 0x5c, 0xb9, 0x98, 0xb4, 0xdc, 0xed, 0x87, 0x4e, 0xfe, 0x4f, 0xcc, 0x5b, 0xed, 0xe5, 0x3f, 0xd8, 0xff, 0x42}}
	return a, nil
}

var _ContribSqlMigrationsTests2_testSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xc1\x6a\xdb\x40\x10\xbd\xeb\x2b\x06\x5d\x64\xd3\x5d\x3b\x51\x4a\x88\xdd\x4b\x0b\xcd\x21\x60\x1c\x68\xe2\xf6\x50\x8a\x18\x69\x47\xd6\x12\x49\xab\xee\xac\xa2\x84\xe0\x7f\x2f\x5a\xab\xb5\xdc\x86\xd0\x43\xc8\x69\x67\x47\xcb\xbc\x37\xef\x3d\x24\x25\xbc\xab\xf4\xd6\xa2\x23\xd8\x34\xc1\xd5\xfa\xe6\xf2\xcb\x2d\x5c\xad\x6f\xaf\x41\x2b\xaa\x9d\x76\x8f\x30\xd1\x4a\x80\xb3\xa8\x1d\x27\x9c\x15\x54\x61\xd2\xda\x72\x1a\x7c\xfd\xb4\xda\x5c\xde\xc0\x24\x52\xe8\x50\xc6\x91\x80\x28\x37\x26\x9a\x7e\x08\x9e\x9d\x93\x64\x96\x7c\x89\x65\x3f\x72\x68\x36\x77\x02\x2a\x72\x85\x51\x02\x32\x53\xe7\x7a\x7b\x18\x1c\x0b\x88\x1a\x64\xee\x8c\x55\xfd\xf4\xa7\x30\x37\x26\x5c\x86\x29\xda\x70\xf7\x3f\x38\xc9\xbe\x97\x6b\xb2\x23\xc8\xd1\xf7\x1e\xfd\xf0\xe6\x18\x79\xbf\xd5\x47\x7a\xc0\xaa\x29\x69\x66\xec\xf6\xad\x21\x33\x53\xfd\x03\xc9\x54\xe6\x09\x93\xbd\xd7\x19\x25\x96\x7e\xb6\xc4\x6e\xef\x10\x3d\x34\xda\x12\x27\xe8\x04\x68\xe6\x96\x94\x2f\x87\x37\xbd\x65\x87\x4b\x41\xa8\xc8\xb2\x00\xcc\x9c\xbe\xa7\xdf\x16\xb0\x80\x3b\x5d\xab\x23\x52\xeb\xeb\x6f\x93\xe9\x9f\x23\x2a\x9c\x6b\x78\x39\x9f\x77\x5d\x37\x33\xf6\x71\xc6\xc5\xdc\x5b\xb3\x8b\xfe\x36\xcb\x77\x4a\xb3\xd5\xf5\x33\x4b\x30\x6b\x53\xc3\x84\x5f\x20\x8e\xad\x2b\x7a\x99\x32\x74\x43\x67\x14\x9a\x51\xfa\x58\x2b\x1f\xbe\x63\xa2\xc3\x11\xbf\xa8\x1f\x59\x6b\xec\xa0\x5e\x5f\xb2\x00\x26\xaa\x3d\x58\x87\x9c\xf4\x97\x11\x52\x1c\xc7\xb1\x4c\xb3\xc5\x42\x2e\xb2\x93\x54\xbe\xa7\xfc\x42\xa6\xe9\xb9\x92\xe7\x69\xba\x90\xa9\x3a\xbb\x90\x27\x78\x7a\xda\xef\xfd\x3d\x00\xf0\x69\x15\x01\xc0\x53\x00\x00\x10\xd6\x58\x51\xb8\x04\x1f\xdf\x00\x60\x17\xfc\xe8\x59\x6f\x56\x2b\x01\x39\x96\x4c\xaf\x4c\xf5\xec\xd5\xa9\xee\x25\x75\xb6\xf5\x54\xc7\xbf\x8e\xcf\xa6\xab\x83\x5f\x01\x00\x00\xff\xff\x6a\x67\x4d\x4a\x4c\x04\x00\x00")

func ContribSqlMigrationsTests2_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_ContribSqlMigrationsTests2_testSql,
		"../contrib/sql/migrations/tests/2_test.sql",
	)
}

func ContribSqlMigrationsTests2_testSql() (*asset, error) {
	bytes, err := ContribSqlMigrationsTests2_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../contrib/sql/migrations/tests/2_test.sql", size: 1100, mode: os.FileMode(0644), modTime: time.Unix(1572885497, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0x50, 0x6e, 0xbc, 0x65, 0xd4, 0x83, 0x11, 0x92, 0x8d, 0x10, 0xa1, 0xa0, 0x0, 0x5d, 0x60, 0x56, 0x4a, 0x81, 0xc9, 0x1f, 0x36, 0x48, 0xe3, 0xc4, 0x54, 0x6e, 0xce, 0x16, 0x4f, 0xb8, 0x1f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../contrib/sql/migrations/postgres/1.sql":   ContribSqlMigrationsPostgres1Sql,
	"../contrib/sql/migrations/postgres/2.sql":   ContribSqlMigrationsPostgres2Sql,
	"../contrib/sql/migrations/tests/1_test.sql": ContribSqlMigrationsTests1_testSql,
	"../contrib/sql/migrations/tests/2_test.sql": ContribSqlMigrationsTests2_testSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"contrib": &bintree{nil, map[string]*bintree{
			"sql": &bintree{nil, map[string]*bintree{
				"migrations": &bintree{nil, map[string]*bintree{
					"postgres": &bintree{nil, map[string]*bintree{
						"1.sql": &bintree{ContribSqlMigrationsPostgres1Sql, map[string]*bintree{}},
						"2.sql": &bintree{ContribSqlMigrationsPostgres2Sql, map[string]*bintree{}},
					}},
					"tests": &bintree{nil, map[string]*bintree{
						"1_test.sql": &bintree{ContribSqlMigrationsTests1_testSql, map[string]*bintree{}},
						"2_test.sql": &bintree{ContribSqlMigrationsTests2_testSql, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
