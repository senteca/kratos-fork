// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Identity Identity represents a hive identity
//
// An identity can be a real human, a service, an IoT device - everything that
// can be described as an "actor" in a system.
// swagger:model Identity
type Identity struct {

	// addresses
	Addresses []*Address `json:"addresses"`

	// birthdate
	// Format: date-time
	Birthdate strfmt.DateTime `json:"birthdate,omitempty"`

	// credentials
	Credentials interface{} `json:"credentials,omitempty"`

	// DisplayName: The name of the user, suitable for display to end-users.  Each
	// user returned MAY include a non-empty displayName value.  The name
	// SHOULD be the full name of the User being described, if known
	// (e.g., "Babs Jensen" or "Ms. Barbara J Jensen, III") but MAY be a
	// username or handle, if that is all that is available (e.g.,
	// "bjensen").  The value provided SHOULD be the primary textual
	// label by which this User is normally displayed by the service
	// provider when presenting it to end-users.
	DisplayName string `json:"display_name,omitempty"`

	// Emails: Email addresses for the User.  The value SHOULD be specified
	// according to [RFC5321].  Service providers SHOULD canonicalize the
	// value according to [RFC5321], e.g., "bjensen@example.com" instead
	// of "bjensen@EXAMPLE.COM".  The "display" sub-attribute MAY be used
	// to return the canonicalized representation of the email value.
	// The "type" sub-attribute is used to provide a classification
	// meaningful to the (human) user.  The user interface should
	// encourage the use of basic values of "work", "home", and "other"
	// and MAY allow additional type values to be used at the discretion
	// of SCIM clients.
	Emails []*Email `json:"emails"`

	// gender
	Gender string `json:"gender,omitempty"`

	// RequestID: A unique identifier chosen by you. It can be a URN (e.g. "arn:aws:iam::123456789012"),
	// a stringified integer (e.g. "123456789012"), a uuid (e.g. "9f425a8d-7efc-4768-8f23-7647a74fdf13"). It is up to you
	// to pick a format you'd like. It is discouraged to use a personally identifiable value here, like the username
	// or the email, as this field is immutable.
	ID string `json:"id,omitempty"`

	// IMS: Instant messaging addresses for the user.  No official
	// canonicalization rules exist for all instant messaging addresses,
	// but service providers SHOULD, when appropriate, remove all
	// whitespace and convert the address to lowercase.  The "type"
	// sub-attribute SHOULD take one of the following values: "aim",
	// "gtalk", "icq", "xmpp", "msn", "skype", "qq", "yahoo", or "other"
	// (representing currently popular IM services at the time of this
	// writing).  Service providers MAY add further values if new IM
	// services are introduced and MAY specify more detailed
	// canonicalization rules for each possible value.
	IMS []*InstantMessaging `json:"ims"`

	// locale
	Locale string `json:"locale,omitempty"`

	// NickName: The casual way to address the user in real life, e.g., "Bob" or
	// "Bobby" instead of "Robert".  This attribute SHOULD NOT be used to
	// represent a User's username (e.g., bjensen or mpepperidge).
	NickName string `json:"nick_name,omitempty"`

	// PhoneNumbers: Phone numbers for the user.  The value SHOULD be specified
	// according to the format defined in [RFC3966], e.g.,
	// 'tel:+1-201-555-0123'.  Service providers SHOULD canonicalize the
	// value according to [RFC3966] format, when appropriate.  The
	// "display" sub-attribute MAY be used to return the canonicalized
	// representation of the phone number value.  The sub-attribute
	// "type" often has typical values of "work", "home", "mobile",
	// "fax", "pager", and "other" and MAY allow more types to be defined
	// by the SCIM clients.
	PhoneNumbers []*PhoneNumber `json:"phone_numbers"`

	// Photos: A URI that is a uniform resource locator (as defined in
	// Section 1.1.3 of [RFC3986]) that points to a resource location
	// representing the user's image.  The resource MUST be a file (e.g.,
	// a GIF, JPEG, or PNG image file) rather than a web page containing
	// an image.  Service providers MAY return the same image in
	// different sizes, although it is recognized that no standard for
	// describing images of various sizes currently exists.  Note that
	// this attribute SHOULD NOT be used to send down arbitrary photos
	// taken by this user; instead, profile photos of the user that are
	// suitable for display when describing the user should be sent.
	// Instead of the standard canonical values for type, this attribute
	// defines the following canonical values to represent popular photo
	// sizes: "photo" and "thumbnail".
	Photos []*Photo `json:"photos"`

	// picture URL
	PictureURL string `json:"picture_url,omitempty"`

	// preferred language
	PreferredLanguage string `json:"preferred_language,omitempty"`

	// ProfileURL: A URI that is a uniform resource locator (as defined in
	// Section 1.1.3 of [RFC3986]) and that points to a location
	// representing the user's online profile (e.g., a web page).  URIs
	// are canonicalized per Section 6.2 of [RFC3986].
	ProfileURL string `json:"profile_url,omitempty"`

	// Title: The user's title, such as "Vice President".
	Title string `json:"title,omitempty"`

	// user type
	UserType string `json:"user_type,omitempty"`

	// website URL
	WebsiteURL string `json:"website_url,omitempty"`

	// metadata
	Metadata RawMessage `json:"metadata,omitempty"`

	// name
	Name *Name `json:"name,omitempty"`

	// zone info
	ZoneInfo Location `json:"zone_info,omitempty"`
}

// Validate validates this identity
func (m *Identity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIMS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumbers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhotos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Identity) validateAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Identity) validateBirthdate(formats strfmt.Registry) error {

	if swag.IsZero(m.Birthdate) { // not required
		return nil
	}

	if err := validate.FormatOf("birthdate", "body", "date-time", m.Birthdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Identity) validateEmails(formats strfmt.Registry) error {

	if swag.IsZero(m.Emails) { // not required
		return nil
	}

	for i := 0; i < len(m.Emails); i++ {
		if swag.IsZero(m.Emails[i]) { // not required
			continue
		}

		if m.Emails[i] != nil {
			if err := m.Emails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Identity) validateIMS(formats strfmt.Registry) error {

	if swag.IsZero(m.IMS) { // not required
		return nil
	}

	for i := 0; i < len(m.IMS); i++ {
		if swag.IsZero(m.IMS[i]) { // not required
			continue
		}

		if m.IMS[i] != nil {
			if err := m.IMS[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ims" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Identity) validatePhoneNumbers(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumbers) { // not required
		return nil
	}

	for i := 0; i < len(m.PhoneNumbers); i++ {
		if swag.IsZero(m.PhoneNumbers[i]) { // not required
			continue
		}

		if m.PhoneNumbers[i] != nil {
			if err := m.PhoneNumbers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phone_numbers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Identity) validatePhotos(formats strfmt.Registry) error {

	if swag.IsZero(m.Photos) { // not required
		return nil
	}

	for i := 0; i < len(m.Photos); i++ {
		if swag.IsZero(m.Photos[i]) { // not required
			continue
		}

		if m.Photos[i] != nil {
			if err := m.Photos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("photos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Identity) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if err := m.Metadata.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metadata")
		}
		return err
	}

	return nil
}

func (m *Identity) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Identity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Identity) UnmarshalBinary(b []byte) error {
	var res Identity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
