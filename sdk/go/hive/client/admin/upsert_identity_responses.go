// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ory/hive/sdk/go/hive/models"
)

// UpsertIdentityReader is a Reader for the UpsertIdentity structure.
type UpsertIdentityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpsertIdentityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpsertIdentityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewUpsertIdentityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpsertIdentityOK creates a UpsertIdentityOK with default headers values
func NewUpsertIdentityOK() *UpsertIdentityOK {
	return &UpsertIdentityOK{}
}

/*UpsertIdentityOK handles this case with default header values.

identity
*/
type UpsertIdentityOK struct {
	Payload *models.Identity
}

func (o *UpsertIdentityOK) Error() string {
	return fmt.Sprintf("[PUT /identities][%d] upsertIdentityOK  %+v", 200, o.Payload)
}

func (o *UpsertIdentityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Identity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertIdentityInternalServerError creates a UpsertIdentityInternalServerError with default headers values
func NewUpsertIdentityInternalServerError() *UpsertIdentityInternalServerError {
	return &UpsertIdentityInternalServerError{}
}

/*UpsertIdentityInternalServerError handles this case with default header values.

genericError
*/
type UpsertIdentityInternalServerError struct {
	Payload *models.GenericError
}

func (o *UpsertIdentityInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /identities][%d] upsertIdentityInternalServerError  %+v", 500, o.Payload)
}

func (o *UpsertIdentityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
